

        /*** Game ***/
        this.boardState = [[0,0,0,0],[0,0,0,0],[0,0,0,0]];//Player1, Player2, Both

checkWinner = function(player) {


winner = this.boardState[player],
loser = this.boardState[(player ^ 1)];

        chkPlayer[0] = winner[0];
        chkPlayer[1] = (winner[1] ^ loser[0]) & winner[1];
        chkPlayer[2] = (winner[2] ^ (loser[0] | loser[1])) & winner[2];
        chkPlayer[3] = (winner[3] ^ (loser[0] | loser[1] | loser[2])) & winner[3];

        number = chkPlayer[0] | chkPlayer[1] | chkPlayer[2] | chkPlayer[3];

        mask = [61440, 3840, 240, 15, 34952, 17476, 8738, 4369, 33825, 4680];
        /*1111 0000 0000 0000
          0000 1111 0000 0000
          0000 0000 1111 0000
          0000 0000 0000 1111
          1000 1000 1000 1000
          0100 0100 0100 0100
          0010 0010 0010 0010
          0001 0001 0001 0001
          1000 0100 0010 0001
          0001 0010 0100 1000*/
        for(i = 0; i < 10; i++) {
                if((mask[i] & number) === mask[i]) {
                        won = true;
                        break;
                }
        }
        return won;
};

onDown
    pawnSize = shapes[i].size;
    maskTile = theState.a3DBoard.aHashMap[shapes[i].tile];
    if(isView) {
            current = ((theState.boardState[0][pawnSize] & maskTile) > 0) ? 0 : 1;
    } else {
            current = theState.currentPlayer;
    }
    p1 = theState.boardState[current][pawnSize];
    p2 = theState.boardState[(current^1)][pawnSize];
    if(shapes[i].onTheBoard) {
            p1 ^= maskTile; //clear tile
    } else {
            if(((i+1) % 4) !== 0) {
                    //make the pawn underneath visible in the stack
                    shapes[i+1].visible = true;
            }
    }

onUp

for(i=0; i <= pawnSize; i++) {
        if(theState.boardState[2][i] & theState.a3DBoard.aHashMap[p]) {
                p = -1;
                break;
        }
}

movePawn

        if(theState.selection.tile > -1) {
                theState.boardState[theState.currentPlayer][pawnSize] ^= theState.a3DBoard.aHashMap[theState.selection.tile];
        }
        //Set new position
        theState.selection.tile = tile;
        theState.boardState[this.currentPlayer][pawnSize] |= theState.a3DBoard.aHashMap[tile];
        theState.boardState[2][pawnSize] = theState.boardState[0][pawnSize] | theState.boardState[1][pawnSize];


